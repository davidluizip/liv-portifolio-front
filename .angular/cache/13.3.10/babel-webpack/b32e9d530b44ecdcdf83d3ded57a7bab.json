{"ast":null,"code":"import { HttpErrorResponse } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nexport let ErrorService = /*#__PURE__*/(() => {\n  class ErrorService {\n    getClientMessage(error) {\n      if (!navigator.onLine) {\n        return 'Sem conexão com a internet';\n      }\n\n      return error.message ? error.message : JSON.stringify(error);\n    }\n\n    getClientStack(error) {\n      return error.stack;\n    }\n\n    getServerMessage(error) {\n      var _a, _b, _c;\n\n      const defaultMessage = 'Houve um erro interno, não se preocupe no momento estamos trabalhando para resolver isso.';\n\n      if (error instanceof HttpErrorResponse) {\n        return (_a = error.message) !== null && _a !== void 0 ? _a : defaultMessage;\n      } else {\n        return (_c = (_b = error.error) === null || _b === void 0 ? void 0 : _b.message) !== null && _c !== void 0 ? _c : defaultMessage;\n      }\n    }\n\n    getServerStack(error) {\n      if (error instanceof HttpErrorResponse) {\n        return '';\n      } else {\n        return JSON.stringify(error.error.stack);\n      }\n    }\n\n  }\n\n  ErrorService.ɵfac = function ErrorService_Factory(t) {\n    return new (t || ErrorService)();\n  };\n\n  ErrorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ErrorService,\n    factory: ErrorService.ɵfac,\n    providedIn: 'root'\n  });\n  return ErrorService;\n})();","map":null,"metadata":{},"sourceType":"module"}