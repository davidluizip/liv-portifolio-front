{"ast":null,"code":"import { HttpErrorResponse, HttpResponse } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError, map, retry } from 'rxjs/operators';\nimport { shouldRetry } from 'src/app/shared/rxjs/custom-operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/toast.service\";\nexport let ResponseProtocolInterceptor = /*#__PURE__*/(() => {\n  class ResponseProtocolInterceptor {\n    constructor(toastService) {\n      this.toastService = toastService;\n    }\n\n    intercept(req, next) {\n      return next.handle(req).pipe(map(event => {\n        if (event instanceof HttpResponse) {\n          return event.clone({\n            body: this.handleResponse(event)\n          });\n        }\n\n        return event;\n      }), retry(shouldRetry({\n        maxRetryAttempts: 2,\n        scalingDuration: 3000,\n        excludedStatusCodes: [404, 403, 401, 400]\n      })), catchError(err => this.handleError(err)));\n    }\n\n    handleResponse( // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    event) {\n      var _a;\n\n      const response = event.body;\n\n      if (event.url.includes('assets') || event.url.includes('google') || event.body instanceof Blob) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return event.body;\n      }\n\n      if (response.status) {\n        if (response.status === 401) {\n          throw new HttpErrorResponse({\n            status: response.status,\n            error: response.error,\n            url: event.url\n          });\n        }\n\n        if (response === null || response === void 0 ? void 0 : response.error) {\n          throw new HttpErrorResponse({\n            status: event.status,\n            error: response.error,\n            url: event.url\n          });\n        }\n\n        return {\n          status: event.status,\n          data: (_a = response.data) !== null && _a !== void 0 ? _a : response\n        };\n      } else {\n        throw new HttpErrorResponse({\n          status: event.status,\n          error: event.body,\n          url: event.url\n        });\n      }\n    }\n\n    handleError(response) {\n      var _a;\n\n      let message = 'Ocorreu um erro inesperado! Tente novamente mais tarde!';\n\n      if (response.status === 401 && !((_a = response.url) === null || _a === void 0 ? void 0 : _a.toLocaleLowerCase().includes('login'))) {\n        message = 'Sessão inválida! É necessario autenticar novamente!';\n        this.toastService.error(message); // TO-DO\n      }\n\n      if (response.status === 500) {\n        this.toastService.error(message);\n      }\n\n      return throwError(() => {\n        return {\n          status: response.status,\n          error: {\n            message: response.error,\n            stack: {\n              url: response.url\n            }\n          }\n        };\n      });\n    }\n\n  }\n\n  ResponseProtocolInterceptor.ɵfac = function ResponseProtocolInterceptor_Factory(t) {\n    return new (t || ResponseProtocolInterceptor)(i0.ɵɵinject(i1.ToastService));\n  };\n\n  ResponseProtocolInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ResponseProtocolInterceptor,\n    factory: ResponseProtocolInterceptor.ɵfac\n  });\n  return ResponseProtocolInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}