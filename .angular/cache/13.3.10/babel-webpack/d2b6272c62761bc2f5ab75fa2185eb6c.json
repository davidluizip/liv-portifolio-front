{"ast":null,"code":"import { ToastService } from '../services/toast.service';\nimport { ErrorService } from './services/error.service';\nimport { LoggerService } from './services/logger.service';\nimport * as i0 from \"@angular/core\";\nexport let GlobalErrorHandler = /*#__PURE__*/(() => {\n  class GlobalErrorHandler {\n    constructor(zone, injector) {\n      this.zone = zone;\n      this.injector = injector;\n    }\n\n    handleError(error) {\n      const toastService = this.injector.get(ToastService);\n      const errorService = this.injector.get(ErrorService);\n      const loggerService = this.injector.get(LoggerService);\n      let message;\n      let stackTrace;\n      console.error(error); // if (error instanceof HttpErrorResponse) {\n      //   message = errorService.getServerMessage(error);\n      //   stackTrace = errorService.getServerStack(error);\n      // } else if (this._isLivErrorResponse(error)) {\n      //   message = errorService.getServerMessage(error);\n      //   stackTrace = errorService.getServerStack(error);\n      // } else {\n      //   message = errorService.getClientMessage(error);\n      //   stackTrace = errorService.getClientStack(error);\n      // }\n\n      this.zone.run(() => {// toastService.error(message);\n        // loggerService.logError(message, stackTrace);\n        // loggerService.sendErrorToServer(message);\n      });\n    }\n\n    _isLivErrorResponse(error) {\n      return true;\n    }\n\n  }\n\n  GlobalErrorHandler.ɵfac = function GlobalErrorHandler_Factory(t) {\n    return new (t || GlobalErrorHandler)(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i0.Injector));\n  };\n\n  GlobalErrorHandler.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GlobalErrorHandler,\n    factory: GlobalErrorHandler.ɵfac\n  });\n  return GlobalErrorHandler;\n})();","map":null,"metadata":{},"sourceType":"module"}