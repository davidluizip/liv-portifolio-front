{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ApiGatewayService = /*#__PURE__*/(() => {\n  class ApiGatewayService {\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n      this._BASE_URL = '';\n    }\n\n    get(endpoint, options = {}) {\n      const url = encodeURI(this.service + endpoint);\n      return this.httpClient.get(url, options).pipe(map(res => res.data));\n    }\n\n    upload(endpoint, data, params) {\n      const headers = new HttpHeaders().append('Content-Type', 'multipart/form-data');\n      const url = encodeURI(this.service + endpoint);\n      return this.httpClient.request('post', url, {\n        params,\n        observe: 'events',\n        body: data,\n        headers\n      });\n    }\n\n    download(endpoint, options = {}) {\n      const url = encodeURI(this.service + endpoint);\n      return this.httpClient.get(url, Object.assign(Object.assign({}, options), {\n        responseType: 'blob'\n      }));\n    }\n\n    post(endpoint, body, options = {}) {\n      const url = encodeURI(this.service + endpoint);\n      return this.httpClient.post(url, body, options).pipe(map(res => res.data));\n    }\n\n    put(endpoint, body, options = {}) {\n      const url = encodeURI(this.service + endpoint);\n      return this.httpClient.put(url, body, options).pipe(map(res => res.data));\n    }\n\n    patch(endpoint, body, options = {}) {\n      const url = encodeURI(this.service + endpoint);\n      return this.httpClient.patch(url, body, options).pipe(map(res => res.data));\n    }\n\n    delete(endpoint, options = {}) {\n      const url = encodeURI(this.service + endpoint);\n      return this.httpClient.delete(url, options).pipe(map(res => res.data));\n    }\n\n    graphql(query, options = {}) {\n      const url = encodeURI(this.service + '/graphql');\n      return this.httpClient.post(url, JSON.stringify({\n        query\n      }), options).pipe(map(res => res.data));\n    }\n\n    get service() {\n      const url = this._BASE_URL.endsWith('/') ? this._BASE_URL.substring(0, this._BASE_URL.length - 1) : this._BASE_URL;\n      return url;\n    }\n\n  }\n\n  ApiGatewayService.ɵfac = function ApiGatewayService_Factory(t) {\n    return new (t || ApiGatewayService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ApiGatewayService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiGatewayService,\n    factory: ApiGatewayService.ɵfac\n  });\n  return ApiGatewayService;\n})();","map":null,"metadata":{},"sourceType":"module"}