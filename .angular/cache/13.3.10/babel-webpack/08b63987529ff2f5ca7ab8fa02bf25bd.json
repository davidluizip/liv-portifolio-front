{"ast":null,"code":"import { HttpEventType } from '@angular/common/http';\nimport { pipe, throwError, timer } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nexport function filterResponse() {\n  return pipe(filter(event => event.type === HttpEventType.Response), map(response => response.body));\n}\nexport function uploadProgress(cb) {\n  return tap(event => {\n    if (event.type === HttpEventType.UploadProgress) {\n      cb(Math.round(event.loaded * 100 / event.total));\n    }\n  });\n}\nexport function shouldRetry({\n  maxRetryAttempts = 3,\n  scalingDuration = 1000,\n  excludedStatusCodes = []\n} = {}) {\n  return {\n    count: maxRetryAttempts,\n\n    delay(error, retryAttempt) {\n      const err = error;\n\n      if (retryAttempt > maxRetryAttempts || excludedStatusCodes.some(statusCode => statusCode === err.status)) {\n        return throwError(() => err);\n      }\n\n      return timer(retryAttempt * scalingDuration);\n    }\n\n  };\n}","map":null,"metadata":{},"sourceType":"module"}