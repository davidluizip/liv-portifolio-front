{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { RegisterSelectModalComponent } from '../pages/register/components/register-select-modal/register-select-modal.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ng-bootstrap/ng-bootstrap\";\nexport let RegisterService = /*#__PURE__*/(() => {\n  class RegisterService {\n    constructor(ngbModal) {\n      this.ngbModal = ngbModal;\n      this._registerFields = new BehaviorSubject([{\n        id: 1,\n        data: null\n      }, {\n        id: 2,\n        data: null\n      }, {\n        id: 3,\n        data: null\n      }, {\n        id: 4,\n        data: null\n      }]);\n      this.registerFields$ = this._registerFields.asObservable();\n      this._selectedRegisterFieldId = new BehaviorSubject(null);\n    }\n\n    get snapshot() {\n      return {\n        registerFields: this._registerFields.getValue(),\n        selectedRegisterFieldId: this._selectedRegisterFieldId.getValue()\n      };\n    }\n\n    setFieldValue(id, data) {\n      const registerFields = this._registerFields.getValue();\n\n      const fieldIndex = this._registerFields.getValue().findIndex(field => field.id === id);\n\n      registerFields[fieldIndex].data = data;\n\n      this._registerFields.next(registerFields);\n    }\n\n    setSelectedRegisterField(id) {\n      this._selectedRegisterFieldId.next(id);\n    }\n\n    resetSelectedRegisterField() {\n      this._selectedRegisterFieldId.next(null);\n    }\n\n    resetFieldValue(id) {\n      const registerFields = this._registerFields.getValue();\n\n      const fieldIndex = this._registerFields.getValue().findIndex(field => field.id === id);\n\n      registerFields[fieldIndex].data = null;\n\n      this._registerFields.next(registerFields);\n    }\n\n    openRegisterTypeModal(fieldId) {\n      this._selectedRegisterFieldId.next(fieldId);\n\n      this.ngbModal.open(RegisterSelectModalComponent, {\n        centered: true,\n        modalDialogClass: 'register-select-modal'\n      });\n    }\n\n  }\n\n  RegisterService.ɵfac = function RegisterService_Factory(t) {\n    return new (t || RegisterService)(i0.ɵɵinject(i1.NgbModal));\n  };\n\n  RegisterService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RegisterService,\n    factory: RegisterService.ɵfac,\n    providedIn: 'root'\n  });\n  return RegisterService;\n})();","map":null,"metadata":{},"sourceType":"module"}